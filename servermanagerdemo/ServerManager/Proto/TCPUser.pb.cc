// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TCPUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TCPUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TCPUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCPUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCPMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCPMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TCPMsg_TCPMsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TCPMsgContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCPMsgContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCPCmdContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCPCmdContent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TCPCmdContent_TCPMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TCPUser_2eproto() {
  protobuf_AddDesc_TCPUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TCPUser.proto");
  GOOGLE_CHECK(file != NULL);
  TCPUser_descriptor_ = file->message_type(0);
  static const int TCPUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, hostip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, hostport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, socketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, servkey_),
  };
  TCPUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCPUser_descriptor_,
      TCPUser::default_instance_,
      TCPUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCPUser));
  TCPMsg_descriptor_ = file->message_type(1);
  static const int TCPMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, fromuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, msgcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, cmdcontent_),
  };
  TCPMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCPMsg_descriptor_,
      TCPMsg::default_instance_,
      TCPMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCPMsg));
  TCPMsg_TCPMsgType_descriptor_ = TCPMsg_descriptor_->enum_type(0);
  TCPMsgContent_descriptor_ = file->message_type(2);
  static const int TCPMsgContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsgContent, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsgContent, msgcontent_),
  };
  TCPMsgContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCPMsgContent_descriptor_,
      TCPMsgContent::default_instance_,
      TCPMsgContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsgContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPMsgContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCPMsgContent));
  TCPCmdContent_descriptor_ = file->message_type(3);
  static const int TCPCmdContent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, cmdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, cmdparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, userlist_),
  };
  TCPCmdContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCPCmdContent_descriptor_,
      TCPCmdContent::default_instance_,
      TCPCmdContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCPCmdContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCPCmdContent));
  TCPCmdContent_TCPMsgType_descriptor_ = TCPCmdContent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TCPUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCPUser_descriptor_, &TCPUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCPMsg_descriptor_, &TCPMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCPMsgContent_descriptor_, &TCPMsgContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCPCmdContent_descriptor_, &TCPCmdContent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TCPUser_2eproto() {
  delete TCPUser::default_instance_;
  delete TCPUser_reflection_;
  delete TCPMsg::default_instance_;
  delete TCPMsg_reflection_;
  delete TCPMsgContent::default_instance_;
  delete TCPMsgContent_reflection_;
  delete TCPCmdContent::default_instance_;
  delete TCPCmdContent_reflection_;
}

void protobuf_AddDesc_TCPUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rTCPUser.proto\"\\\n\007TCPUser\022\016\n\006hostIP\030\001 \002"
    "(\t\022\020\n\010hostPort\030\002 \002(\t\022\020\n\010socketid\030\003 \001(\005\022\014"
    "\n\004nick\030\004 \001(\t\022\017\n\007servKey\030\005 \001(\t\"\273\001\n\006TCPMsg"
    "\022\032\n\010fromUser\030\001 \002(\0132\010.TCPUser\022#\n\007msgtype\030"
    "\002 \002(\0162\022.TCPMsg.TCPMsgType\022\"\n\nmsgContent\030"
    "\003 \001(\0132\016.TCPMsgContent\022\"\n\ncmdContent\030\004 \001("
    "\0132\016.TCPCmdContent\"(\n\nTCPMsgType\022\014\n\010EMsg_"
    "Msg\020\001\022\014\n\010EMsg_Cmd\020\002\"=\n\rTCPMsgContent\022\030\n\006"
    "toUser\030\001 \002(\0132\010.TCPUser\022\022\n\nmsgContent\030\002 \002"
    "(\t\"\316\001\n\rTCPCmdContent\022\030\n\006toUser\030\001 \002(\0132\010.T"
    "CPUser\022*\n\007cmdType\030\002 \002(\0162\031.TCPCmdContent."
    "TCPMsgType\022\020\n\010cmdParam\030\003 \001(\t\022\032\n\010userList"
    "\030\004 \003(\0132\010.TCPUser\"I\n\nTCPMsgType\022\016\n\nECmd_L"
    "ogin\020\001\022\r\n\tECmd_Sync\020\002\022\r\n\tECmd_Exit\020\003\022\r\n\t"
    "ECmd_Nick\020\004", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TCPUser.proto", &protobuf_RegisterTypes);
  TCPUser::default_instance_ = new TCPUser();
  TCPMsg::default_instance_ = new TCPMsg();
  TCPMsgContent::default_instance_ = new TCPMsgContent();
  TCPCmdContent::default_instance_ = new TCPCmdContent();
  TCPUser::default_instance_->InitAsDefaultInstance();
  TCPMsg::default_instance_->InitAsDefaultInstance();
  TCPMsgContent::default_instance_->InitAsDefaultInstance();
  TCPCmdContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TCPUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TCPUser_2eproto {
  StaticDescriptorInitializer_TCPUser_2eproto() {
    protobuf_AddDesc_TCPUser_2eproto();
  }
} static_descriptor_initializer_TCPUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCPUser::kHostIPFieldNumber;
const int TCPUser::kHostPortFieldNumber;
const int TCPUser::kSocketidFieldNumber;
const int TCPUser::kNickFieldNumber;
const int TCPUser::kServKeyFieldNumber;
#endif  // !_MSC_VER

TCPUser::TCPUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TCPUser)
}

void TCPUser::InitAsDefaultInstance() {
}

TCPUser::TCPUser(const TCPUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TCPUser)
}

void TCPUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socketid_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCPUser::~TCPUser() {
  // @@protoc_insertion_point(destructor:TCPUser)
  SharedDtor();
}

void TCPUser::SharedDtor() {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostip_;
  }
  if (hostport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostport_;
  }
  if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (servkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servkey_;
  }
  if (this != default_instance_) {
  }
}

void TCPUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPUser_descriptor_;
}

const TCPUser& TCPUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TCPUser_2eproto();
  return *default_instance_;
}

TCPUser* TCPUser::default_instance_ = NULL;

TCPUser* TCPUser::New() const {
  return new TCPUser;
}

void TCPUser::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_hostip()) {
      if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostip_->clear();
      }
    }
    if (has_hostport()) {
      if (hostport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostport_->clear();
      }
    }
    socketid_ = 0;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_->clear();
      }
    }
    if (has_servkey()) {
      if (servkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCPUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TCPUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostIP = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostip().data(), this->hostip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostPort;
        break;
      }

      // required string hostPort = 2;
      case 2: {
        if (tag == 18) {
         parse_hostPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostport().data(), this->hostport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_socketid;
        break;
      }

      // optional int32 socketid = 3;
      case 3: {
        if (tag == 24) {
         parse_socketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socketid_)));
          set_has_socketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick;
        break;
      }

      // optional string nick = 4;
      case 4: {
        if (tag == 34) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_servKey;
        break;
      }

      // optional string servKey = 5;
      case 5: {
        if (tag == 42) {
         parse_servKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servkey().data(), this->servkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TCPUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TCPUser)
  return false;
#undef DO_
}

void TCPUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TCPUser)
  // required string hostIP = 1;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostip(), output);
  }

  // required string hostPort = 2;
  if (has_hostport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostport().data(), this->hostport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostport(), output);
  }

  // optional int32 socketid = 3;
  if (has_socketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socketid(), output);
  }

  // optional string nick = 4;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick(), output);
  }

  // optional string servKey = 5;
  if (has_servkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servkey().data(), this->servkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->servkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TCPUser)
}

::google::protobuf::uint8* TCPUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCPUser)
  // required string hostIP = 1;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostip(), target);
  }

  // required string hostPort = 2;
  if (has_hostport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostport().data(), this->hostport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostport(), target);
  }

  // optional int32 socketid = 3;
  if (has_socketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socketid(), target);
  }

  // optional string nick = 4;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick(), target);
  }

  // optional string servKey = 5;
  if (has_servkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servkey().data(), this->servkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCPUser)
  return target;
}

int TCPUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostIP = 1;
    if (has_hostip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostip());
    }

    // required string hostPort = 2;
    if (has_hostport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostport());
    }

    // optional int32 socketid = 3;
    if (has_socketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socketid());
    }

    // optional string nick = 4;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional string servKey = 5;
    if (has_servkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCPUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCPUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCPUser::MergeFrom(const TCPUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostip()) {
      set_hostip(from.hostip());
    }
    if (from.has_hostport()) {
      set_hostport(from.hostport());
    }
    if (from.has_socketid()) {
      set_socketid(from.socketid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_servkey()) {
      set_servkey(from.servkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCPUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPUser::CopyFrom(const TCPUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TCPUser::Swap(TCPUser* other) {
  if (other != this) {
    std::swap(hostip_, other->hostip_);
    std::swap(hostport_, other->hostport_);
    std::swap(socketid_, other->socketid_);
    std::swap(nick_, other->nick_);
    std::swap(servkey_, other->servkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCPUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCPUser_descriptor_;
  metadata.reflection = TCPUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TCPMsg_TCPMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPMsg_TCPMsgType_descriptor_;
}
bool TCPMsg_TCPMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TCPMsg_TCPMsgType TCPMsg::EMsg_Msg;
const TCPMsg_TCPMsgType TCPMsg::EMsg_Cmd;
const TCPMsg_TCPMsgType TCPMsg::TCPMsgType_MIN;
const TCPMsg_TCPMsgType TCPMsg::TCPMsgType_MAX;
const int TCPMsg::TCPMsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TCPMsg::kFromUserFieldNumber;
const int TCPMsg::kMsgtypeFieldNumber;
const int TCPMsg::kMsgContentFieldNumber;
const int TCPMsg::kCmdContentFieldNumber;
#endif  // !_MSC_VER

TCPMsg::TCPMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TCPMsg)
}

void TCPMsg::InitAsDefaultInstance() {
  fromuser_ = const_cast< ::TCPUser*>(&::TCPUser::default_instance());
  msgcontent_ = const_cast< ::TCPMsgContent*>(&::TCPMsgContent::default_instance());
  cmdcontent_ = const_cast< ::TCPCmdContent*>(&::TCPCmdContent::default_instance());
}

TCPMsg::TCPMsg(const TCPMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TCPMsg)
}

void TCPMsg::SharedCtor() {
  _cached_size_ = 0;
  fromuser_ = NULL;
  msgtype_ = 1;
  msgcontent_ = NULL;
  cmdcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCPMsg::~TCPMsg() {
  // @@protoc_insertion_point(destructor:TCPMsg)
  SharedDtor();
}

void TCPMsg::SharedDtor() {
  if (this != default_instance_) {
    delete fromuser_;
    delete msgcontent_;
    delete cmdcontent_;
  }
}

void TCPMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPMsg_descriptor_;
}

const TCPMsg& TCPMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TCPUser_2eproto();
  return *default_instance_;
}

TCPMsg* TCPMsg::default_instance_ = NULL;

TCPMsg* TCPMsg::New() const {
  return new TCPMsg;
}

void TCPMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_fromuser()) {
      if (fromuser_ != NULL) fromuser_->::TCPUser::Clear();
    }
    msgtype_ = 1;
    if (has_msgcontent()) {
      if (msgcontent_ != NULL) msgcontent_->::TCPMsgContent::Clear();
    }
    if (has_cmdcontent()) {
      if (cmdcontent_ != NULL) cmdcontent_->::TCPCmdContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCPMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TCPMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TCPUser fromUser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgtype;
        break;
      }

      // required .TCPMsg.TCPMsgType msgtype = 2;
      case 2: {
        if (tag == 16) {
         parse_msgtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TCPMsg_TCPMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::TCPMsg_TCPMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgContent;
        break;
      }

      // optional .TCPMsgContent msgContent = 3;
      case 3: {
        if (tag == 26) {
         parse_msgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmdContent;
        break;
      }

      // optional .TCPCmdContent cmdContent = 4;
      case 4: {
        if (tag == 34) {
         parse_cmdContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TCPMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TCPMsg)
  return false;
#undef DO_
}

void TCPMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TCPMsg)
  // required .TCPUser fromUser = 1;
  if (has_fromuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fromuser(), output);
  }

  // required .TCPMsg.TCPMsgType msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional .TCPMsgContent msgContent = 3;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgcontent(), output);
  }

  // optional .TCPCmdContent cmdContent = 4;
  if (has_cmdcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cmdcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TCPMsg)
}

::google::protobuf::uint8* TCPMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCPMsg)
  // required .TCPUser fromUser = 1;
  if (has_fromuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fromuser(), target);
  }

  // required .TCPMsg.TCPMsgType msgtype = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional .TCPMsgContent msgContent = 3;
  if (has_msgcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgcontent(), target);
  }

  // optional .TCPCmdContent cmdContent = 4;
  if (has_cmdcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cmdcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCPMsg)
  return target;
}

int TCPMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TCPUser fromUser = 1;
    if (has_fromuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromuser());
    }

    // required .TCPMsg.TCPMsgType msgtype = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .TCPMsgContent msgContent = 3;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgcontent());
    }

    // optional .TCPCmdContent cmdContent = 4;
    if (has_cmdcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCPMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCPMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCPMsg::MergeFrom(const TCPMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuser()) {
      mutable_fromuser()->::TCPUser::MergeFrom(from.fromuser());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgcontent()) {
      mutable_msgcontent()->::TCPMsgContent::MergeFrom(from.msgcontent());
    }
    if (from.has_cmdcontent()) {
      mutable_cmdcontent()->::TCPCmdContent::MergeFrom(from.cmdcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCPMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPMsg::CopyFrom(const TCPMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fromuser()) {
    if (!this->fromuser().IsInitialized()) return false;
  }
  if (has_msgcontent()) {
    if (!this->msgcontent().IsInitialized()) return false;
  }
  if (has_cmdcontent()) {
    if (!this->cmdcontent().IsInitialized()) return false;
  }
  return true;
}

void TCPMsg::Swap(TCPMsg* other) {
  if (other != this) {
    std::swap(fromuser_, other->fromuser_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(cmdcontent_, other->cmdcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCPMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCPMsg_descriptor_;
  metadata.reflection = TCPMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCPMsgContent::kToUserFieldNumber;
const int TCPMsgContent::kMsgContentFieldNumber;
#endif  // !_MSC_VER

TCPMsgContent::TCPMsgContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TCPMsgContent)
}

void TCPMsgContent::InitAsDefaultInstance() {
  touser_ = const_cast< ::TCPUser*>(&::TCPUser::default_instance());
}

TCPMsgContent::TCPMsgContent(const TCPMsgContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TCPMsgContent)
}

void TCPMsgContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  touser_ = NULL;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCPMsgContent::~TCPMsgContent() {
  // @@protoc_insertion_point(destructor:TCPMsgContent)
  SharedDtor();
}

void TCPMsgContent::SharedDtor() {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (this != default_instance_) {
    delete touser_;
  }
}

void TCPMsgContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPMsgContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPMsgContent_descriptor_;
}

const TCPMsgContent& TCPMsgContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TCPUser_2eproto();
  return *default_instance_;
}

TCPMsgContent* TCPMsgContent::default_instance_ = NULL;

TCPMsgContent* TCPMsgContent::New() const {
  return new TCPMsgContent;
}

void TCPMsgContent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_touser()) {
      if (touser_ != NULL) touser_->::TCPUser::Clear();
    }
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCPMsgContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TCPMsgContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TCPUser toUser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgContent;
        break;
      }

      // required string msgContent = 2;
      case 2: {
        if (tag == 18) {
         parse_msgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgcontent().data(), this->msgcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgcontent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TCPMsgContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TCPMsgContent)
  return false;
#undef DO_
}

void TCPMsgContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TCPMsgContent)
  // required .TCPUser toUser = 1;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->touser(), output);
  }

  // required string msgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcontent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TCPMsgContent)
}

::google::protobuf::uint8* TCPMsgContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCPMsgContent)
  // required .TCPUser toUser = 1;
  if (has_touser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->touser(), target);
  }

  // required string msgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcontent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCPMsgContent)
  return target;
}

int TCPMsgContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TCPUser toUser = 1;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touser());
    }

    // required string msgContent = 2;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPMsgContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCPMsgContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCPMsgContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCPMsgContent::MergeFrom(const TCPMsgContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_touser()) {
      mutable_touser()->::TCPUser::MergeFrom(from.touser());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCPMsgContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPMsgContent::CopyFrom(const TCPMsgContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPMsgContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_touser()) {
    if (!this->touser().IsInitialized()) return false;
  }
  return true;
}

void TCPMsgContent::Swap(TCPMsgContent* other) {
  if (other != this) {
    std::swap(touser_, other->touser_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCPMsgContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCPMsgContent_descriptor_;
  metadata.reflection = TCPMsgContent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TCPCmdContent_TCPMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPCmdContent_TCPMsgType_descriptor_;
}
bool TCPCmdContent_TCPMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TCPCmdContent_TCPMsgType TCPCmdContent::ECmd_Login;
const TCPCmdContent_TCPMsgType TCPCmdContent::ECmd_Sync;
const TCPCmdContent_TCPMsgType TCPCmdContent::ECmd_Exit;
const TCPCmdContent_TCPMsgType TCPCmdContent::ECmd_Nick;
const TCPCmdContent_TCPMsgType TCPCmdContent::TCPMsgType_MIN;
const TCPCmdContent_TCPMsgType TCPCmdContent::TCPMsgType_MAX;
const int TCPCmdContent::TCPMsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TCPCmdContent::kToUserFieldNumber;
const int TCPCmdContent::kCmdTypeFieldNumber;
const int TCPCmdContent::kCmdParamFieldNumber;
const int TCPCmdContent::kUserListFieldNumber;
#endif  // !_MSC_VER

TCPCmdContent::TCPCmdContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TCPCmdContent)
}

void TCPCmdContent::InitAsDefaultInstance() {
  touser_ = const_cast< ::TCPUser*>(&::TCPUser::default_instance());
}

TCPCmdContent::TCPCmdContent(const TCPCmdContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TCPCmdContent)
}

void TCPCmdContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  touser_ = NULL;
  cmdtype_ = 1;
  cmdparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCPCmdContent::~TCPCmdContent() {
  // @@protoc_insertion_point(destructor:TCPCmdContent)
  SharedDtor();
}

void TCPCmdContent::SharedDtor() {
  if (cmdparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdparam_;
  }
  if (this != default_instance_) {
    delete touser_;
  }
}

void TCPCmdContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPCmdContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCPCmdContent_descriptor_;
}

const TCPCmdContent& TCPCmdContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TCPUser_2eproto();
  return *default_instance_;
}

TCPCmdContent* TCPCmdContent::default_instance_ = NULL;

TCPCmdContent* TCPCmdContent::New() const {
  return new TCPCmdContent;
}

void TCPCmdContent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_touser()) {
      if (touser_ != NULL) touser_->::TCPUser::Clear();
    }
    cmdtype_ = 1;
    if (has_cmdparam()) {
      if (cmdparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmdparam_->clear();
      }
    }
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCPCmdContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TCPCmdContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TCPUser toUser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdType;
        break;
      }

      // required .TCPCmdContent.TCPMsgType cmdType = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TCPCmdContent_TCPMsgType_IsValid(value)) {
            set_cmdtype(static_cast< ::TCPCmdContent_TCPMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmdParam;
        break;
      }

      // optional string cmdParam = 3;
      case 3: {
        if (tag == 26) {
         parse_cmdParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdparam().data(), this->cmdparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmdparam");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userList;
        break;
      }

      // repeated .TCPUser userList = 4;
      case 4: {
        if (tag == 34) {
         parse_userList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TCPCmdContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TCPCmdContent)
  return false;
#undef DO_
}

void TCPCmdContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TCPCmdContent)
  // required .TCPUser toUser = 1;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->touser(), output);
  }

  // required .TCPCmdContent.TCPMsgType cmdType = 2;
  if (has_cmdtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmdtype(), output);
  }

  // optional string cmdParam = 3;
  if (has_cmdparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdparam().data(), this->cmdparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmdparam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cmdparam(), output);
  }

  // repeated .TCPUser userList = 4;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TCPCmdContent)
}

::google::protobuf::uint8* TCPCmdContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCPCmdContent)
  // required .TCPUser toUser = 1;
  if (has_touser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->touser(), target);
  }

  // required .TCPCmdContent.TCPMsgType cmdType = 2;
  if (has_cmdtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmdtype(), target);
  }

  // optional string cmdParam = 3;
  if (has_cmdparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdparam().data(), this->cmdparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmdparam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cmdparam(), target);
  }

  // repeated .TCPUser userList = 4;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCPCmdContent)
  return target;
}

int TCPCmdContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TCPUser toUser = 1;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touser());
    }

    // required .TCPCmdContent.TCPMsgType cmdType = 2;
    if (has_cmdtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdtype());
    }

    // optional string cmdParam = 3;
    if (has_cmdparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdparam());
    }

  }
  // repeated .TCPUser userList = 4;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPCmdContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCPCmdContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCPCmdContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCPCmdContent::MergeFrom(const TCPCmdContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_touser()) {
      mutable_touser()->::TCPUser::MergeFrom(from.touser());
    }
    if (from.has_cmdtype()) {
      set_cmdtype(from.cmdtype());
    }
    if (from.has_cmdparam()) {
      set_cmdparam(from.cmdparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCPCmdContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPCmdContent::CopyFrom(const TCPCmdContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPCmdContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_touser()) {
    if (!this->touser().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->userlist())) return false;
  return true;
}

void TCPCmdContent::Swap(TCPCmdContent* other) {
  if (other != this) {
    std::swap(touser_, other->touser_);
    std::swap(cmdtype_, other->cmdtype_);
    std::swap(cmdparam_, other->cmdparam_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCPCmdContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCPCmdContent_descriptor_;
  metadata.reflection = TCPCmdContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
