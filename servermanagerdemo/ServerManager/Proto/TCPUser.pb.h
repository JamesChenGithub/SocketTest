// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TCPUser.proto

#ifndef PROTOBUF_TCPUser_2eproto__INCLUDED
#define PROTOBUF_TCPUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TCPUser_2eproto();
void protobuf_AssignDesc_TCPUser_2eproto();
void protobuf_ShutdownFile_TCPUser_2eproto();

class TCPUser;
class TCPMsg;
class TCPMsgContent;
class TCPCmdContent;

enum TCPMsg_TCPMsgType {
  TCPMsg_TCPMsgType_EMsg_Msg = 1,
  TCPMsg_TCPMsgType_EMsg_Cmd = 2
};
bool TCPMsg_TCPMsgType_IsValid(int value);
const TCPMsg_TCPMsgType TCPMsg_TCPMsgType_TCPMsgType_MIN = TCPMsg_TCPMsgType_EMsg_Msg;
const TCPMsg_TCPMsgType TCPMsg_TCPMsgType_TCPMsgType_MAX = TCPMsg_TCPMsgType_EMsg_Cmd;
const int TCPMsg_TCPMsgType_TCPMsgType_ARRAYSIZE = TCPMsg_TCPMsgType_TCPMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TCPMsg_TCPMsgType_descriptor();
inline const ::std::string& TCPMsg_TCPMsgType_Name(TCPMsg_TCPMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TCPMsg_TCPMsgType_descriptor(), value);
}
inline bool TCPMsg_TCPMsgType_Parse(
    const ::std::string& name, TCPMsg_TCPMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TCPMsg_TCPMsgType>(
    TCPMsg_TCPMsgType_descriptor(), name, value);
}
enum TCPCmdContent_TCPMsgType {
  TCPCmdContent_TCPMsgType_ECmd_Login = 1,
  TCPCmdContent_TCPMsgType_ECmd_Sync = 2,
  TCPCmdContent_TCPMsgType_ECmd_Exit = 3
};
bool TCPCmdContent_TCPMsgType_IsValid(int value);
const TCPCmdContent_TCPMsgType TCPCmdContent_TCPMsgType_TCPMsgType_MIN = TCPCmdContent_TCPMsgType_ECmd_Login;
const TCPCmdContent_TCPMsgType TCPCmdContent_TCPMsgType_TCPMsgType_MAX = TCPCmdContent_TCPMsgType_ECmd_Exit;
const int TCPCmdContent_TCPMsgType_TCPMsgType_ARRAYSIZE = TCPCmdContent_TCPMsgType_TCPMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TCPCmdContent_TCPMsgType_descriptor();
inline const ::std::string& TCPCmdContent_TCPMsgType_Name(TCPCmdContent_TCPMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TCPCmdContent_TCPMsgType_descriptor(), value);
}
inline bool TCPCmdContent_TCPMsgType_Parse(
    const ::std::string& name, TCPCmdContent_TCPMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TCPCmdContent_TCPMsgType>(
    TCPCmdContent_TCPMsgType_descriptor(), name, value);
}
// ===================================================================

class TCPUser : public ::google::protobuf::Message {
 public:
  TCPUser();
  virtual ~TCPUser();

  TCPUser(const TCPUser& from);

  inline TCPUser& operator=(const TCPUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCPUser& default_instance();

  void Swap(TCPUser* other);

  // implements Message ----------------------------------------------

  TCPUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCPUser& from);
  void MergeFrom(const TCPUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostIP = 1;
  inline bool has_hostip() const;
  inline void clear_hostip();
  static const int kHostIPFieldNumber = 1;
  inline const ::std::string& hostip() const;
  inline void set_hostip(const ::std::string& value);
  inline void set_hostip(const char* value);
  inline void set_hostip(const char* value, size_t size);
  inline ::std::string* mutable_hostip();
  inline ::std::string* release_hostip();
  inline void set_allocated_hostip(::std::string* hostip);

  // required string hostPort = 2;
  inline bool has_hostport() const;
  inline void clear_hostport();
  static const int kHostPortFieldNumber = 2;
  inline const ::std::string& hostport() const;
  inline void set_hostport(const ::std::string& value);
  inline void set_hostport(const char* value);
  inline void set_hostport(const char* value, size_t size);
  inline ::std::string* mutable_hostport();
  inline ::std::string* release_hostport();
  inline void set_allocated_hostport(::std::string* hostport);

  // optional int32 socketid = 3;
  inline bool has_socketid() const;
  inline void clear_socketid();
  static const int kSocketidFieldNumber = 3;
  inline ::google::protobuf::int32 socketid() const;
  inline void set_socketid(::google::protobuf::int32 value);

  // optional string nick = 4;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 4;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:TCPUser)
 private:
  inline void set_has_hostip();
  inline void clear_has_hostip();
  inline void set_has_hostport();
  inline void clear_has_hostport();
  inline void set_has_socketid();
  inline void clear_has_socketid();
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hostip_;
  ::std::string* hostport_;
  ::std::string* nick_;
  ::google::protobuf::int32 socketid_;
  friend void  protobuf_AddDesc_TCPUser_2eproto();
  friend void protobuf_AssignDesc_TCPUser_2eproto();
  friend void protobuf_ShutdownFile_TCPUser_2eproto();

  void InitAsDefaultInstance();
  static TCPUser* default_instance_;
};
// -------------------------------------------------------------------

class TCPMsg : public ::google::protobuf::Message {
 public:
  TCPMsg();
  virtual ~TCPMsg();

  TCPMsg(const TCPMsg& from);

  inline TCPMsg& operator=(const TCPMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCPMsg& default_instance();

  void Swap(TCPMsg* other);

  // implements Message ----------------------------------------------

  TCPMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCPMsg& from);
  void MergeFrom(const TCPMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TCPMsg_TCPMsgType TCPMsgType;
  static const TCPMsgType EMsg_Msg = TCPMsg_TCPMsgType_EMsg_Msg;
  static const TCPMsgType EMsg_Cmd = TCPMsg_TCPMsgType_EMsg_Cmd;
  static inline bool TCPMsgType_IsValid(int value) {
    return TCPMsg_TCPMsgType_IsValid(value);
  }
  static const TCPMsgType TCPMsgType_MIN =
    TCPMsg_TCPMsgType_TCPMsgType_MIN;
  static const TCPMsgType TCPMsgType_MAX =
    TCPMsg_TCPMsgType_TCPMsgType_MAX;
  static const int TCPMsgType_ARRAYSIZE =
    TCPMsg_TCPMsgType_TCPMsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TCPMsgType_descriptor() {
    return TCPMsg_TCPMsgType_descriptor();
  }
  static inline const ::std::string& TCPMsgType_Name(TCPMsgType value) {
    return TCPMsg_TCPMsgType_Name(value);
  }
  static inline bool TCPMsgType_Parse(const ::std::string& name,
      TCPMsgType* value) {
    return TCPMsg_TCPMsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .TCPUser fromUser = 1;
  inline bool has_fromuser() const;
  inline void clear_fromuser();
  static const int kFromUserFieldNumber = 1;
  inline const ::TCPUser& fromuser() const;
  inline ::TCPUser* mutable_fromuser();
  inline ::TCPUser* release_fromuser();
  inline void set_allocated_fromuser(::TCPUser* fromuser);

  // required .TCPMsg.TCPMsgType msgtype = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgtypeFieldNumber = 2;
  inline ::TCPMsg_TCPMsgType msgtype() const;
  inline void set_msgtype(::TCPMsg_TCPMsgType value);

  // optional .TCPMsgContent msgContent = 3;
  inline bool has_msgcontent() const;
  inline void clear_msgcontent();
  static const int kMsgContentFieldNumber = 3;
  inline const ::TCPMsgContent& msgcontent() const;
  inline ::TCPMsgContent* mutable_msgcontent();
  inline ::TCPMsgContent* release_msgcontent();
  inline void set_allocated_msgcontent(::TCPMsgContent* msgcontent);

  // optional .TCPCmdContent cmdContent = 4;
  inline bool has_cmdcontent() const;
  inline void clear_cmdcontent();
  static const int kCmdContentFieldNumber = 4;
  inline const ::TCPCmdContent& cmdcontent() const;
  inline ::TCPCmdContent* mutable_cmdcontent();
  inline ::TCPCmdContent* release_cmdcontent();
  inline void set_allocated_cmdcontent(::TCPCmdContent* cmdcontent);

  // @@protoc_insertion_point(class_scope:TCPMsg)
 private:
  inline void set_has_fromuser();
  inline void clear_has_fromuser();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_msgcontent();
  inline void clear_has_msgcontent();
  inline void set_has_cmdcontent();
  inline void clear_has_cmdcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TCPUser* fromuser_;
  ::TCPMsgContent* msgcontent_;
  ::TCPCmdContent* cmdcontent_;
  int msgtype_;
  friend void  protobuf_AddDesc_TCPUser_2eproto();
  friend void protobuf_AssignDesc_TCPUser_2eproto();
  friend void protobuf_ShutdownFile_TCPUser_2eproto();

  void InitAsDefaultInstance();
  static TCPMsg* default_instance_;
};
// -------------------------------------------------------------------

class TCPMsgContent : public ::google::protobuf::Message {
 public:
  TCPMsgContent();
  virtual ~TCPMsgContent();

  TCPMsgContent(const TCPMsgContent& from);

  inline TCPMsgContent& operator=(const TCPMsgContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCPMsgContent& default_instance();

  void Swap(TCPMsgContent* other);

  // implements Message ----------------------------------------------

  TCPMsgContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCPMsgContent& from);
  void MergeFrom(const TCPMsgContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TCPUser toUser = 1;
  inline bool has_touser() const;
  inline void clear_touser();
  static const int kToUserFieldNumber = 1;
  inline const ::TCPUser& touser() const;
  inline ::TCPUser* mutable_touser();
  inline ::TCPUser* release_touser();
  inline void set_allocated_touser(::TCPUser* touser);

  // required string msgContent = 2;
  inline bool has_msgcontent() const;
  inline void clear_msgcontent();
  static const int kMsgContentFieldNumber = 2;
  inline const ::std::string& msgcontent() const;
  inline void set_msgcontent(const ::std::string& value);
  inline void set_msgcontent(const char* value);
  inline void set_msgcontent(const char* value, size_t size);
  inline ::std::string* mutable_msgcontent();
  inline ::std::string* release_msgcontent();
  inline void set_allocated_msgcontent(::std::string* msgcontent);

  // @@protoc_insertion_point(class_scope:TCPMsgContent)
 private:
  inline void set_has_touser();
  inline void clear_has_touser();
  inline void set_has_msgcontent();
  inline void clear_has_msgcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TCPUser* touser_;
  ::std::string* msgcontent_;
  friend void  protobuf_AddDesc_TCPUser_2eproto();
  friend void protobuf_AssignDesc_TCPUser_2eproto();
  friend void protobuf_ShutdownFile_TCPUser_2eproto();

  void InitAsDefaultInstance();
  static TCPMsgContent* default_instance_;
};
// -------------------------------------------------------------------

class TCPCmdContent : public ::google::protobuf::Message {
 public:
  TCPCmdContent();
  virtual ~TCPCmdContent();

  TCPCmdContent(const TCPCmdContent& from);

  inline TCPCmdContent& operator=(const TCPCmdContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCPCmdContent& default_instance();

  void Swap(TCPCmdContent* other);

  // implements Message ----------------------------------------------

  TCPCmdContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCPCmdContent& from);
  void MergeFrom(const TCPCmdContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TCPCmdContent_TCPMsgType TCPMsgType;
  static const TCPMsgType ECmd_Login = TCPCmdContent_TCPMsgType_ECmd_Login;
  static const TCPMsgType ECmd_Sync = TCPCmdContent_TCPMsgType_ECmd_Sync;
  static const TCPMsgType ECmd_Exit = TCPCmdContent_TCPMsgType_ECmd_Exit;
  static inline bool TCPMsgType_IsValid(int value) {
    return TCPCmdContent_TCPMsgType_IsValid(value);
  }
  static const TCPMsgType TCPMsgType_MIN =
    TCPCmdContent_TCPMsgType_TCPMsgType_MIN;
  static const TCPMsgType TCPMsgType_MAX =
    TCPCmdContent_TCPMsgType_TCPMsgType_MAX;
  static const int TCPMsgType_ARRAYSIZE =
    TCPCmdContent_TCPMsgType_TCPMsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TCPMsgType_descriptor() {
    return TCPCmdContent_TCPMsgType_descriptor();
  }
  static inline const ::std::string& TCPMsgType_Name(TCPMsgType value) {
    return TCPCmdContent_TCPMsgType_Name(value);
  }
  static inline bool TCPMsgType_Parse(const ::std::string& name,
      TCPMsgType* value) {
    return TCPCmdContent_TCPMsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .TCPUser toUser = 1;
  inline bool has_touser() const;
  inline void clear_touser();
  static const int kToUserFieldNumber = 1;
  inline const ::TCPUser& touser() const;
  inline ::TCPUser* mutable_touser();
  inline ::TCPUser* release_touser();
  inline void set_allocated_touser(::TCPUser* touser);

  // required .TCPCmdContent.TCPMsgType cmdType = 2;
  inline bool has_cmdtype() const;
  inline void clear_cmdtype();
  static const int kCmdTypeFieldNumber = 2;
  inline ::TCPCmdContent_TCPMsgType cmdtype() const;
  inline void set_cmdtype(::TCPCmdContent_TCPMsgType value);

  // optional string cmdParam = 3;
  inline bool has_cmdparam() const;
  inline void clear_cmdparam();
  static const int kCmdParamFieldNumber = 3;
  inline const ::std::string& cmdparam() const;
  inline void set_cmdparam(const ::std::string& value);
  inline void set_cmdparam(const char* value);
  inline void set_cmdparam(const char* value, size_t size);
  inline ::std::string* mutable_cmdparam();
  inline ::std::string* release_cmdparam();
  inline void set_allocated_cmdparam(::std::string* cmdparam);

  // repeated .TCPUser userList = 4;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 4;
  inline const ::TCPUser& userlist(int index) const;
  inline ::TCPUser* mutable_userlist(int index);
  inline ::TCPUser* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::TCPUser >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TCPUser >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:TCPCmdContent)
 private:
  inline void set_has_touser();
  inline void clear_has_touser();
  inline void set_has_cmdtype();
  inline void clear_has_cmdtype();
  inline void set_has_cmdparam();
  inline void clear_has_cmdparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TCPUser* touser_;
  ::std::string* cmdparam_;
  ::google::protobuf::RepeatedPtrField< ::TCPUser > userlist_;
  int cmdtype_;
  friend void  protobuf_AddDesc_TCPUser_2eproto();
  friend void protobuf_AssignDesc_TCPUser_2eproto();
  friend void protobuf_ShutdownFile_TCPUser_2eproto();

  void InitAsDefaultInstance();
  static TCPCmdContent* default_instance_;
};
// ===================================================================


// ===================================================================

// TCPUser

// required string hostIP = 1;
inline bool TCPUser::has_hostip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCPUser::set_has_hostip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCPUser::clear_has_hostip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCPUser::clear_hostip() {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_->clear();
  }
  clear_has_hostip();
}
inline const ::std::string& TCPUser::hostip() const {
  // @@protoc_insertion_point(field_get:TCPUser.hostIP)
  return *hostip_;
}
inline void TCPUser::set_hostip(const ::std::string& value) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(value);
  // @@protoc_insertion_point(field_set:TCPUser.hostIP)
}
inline void TCPUser::set_hostip(const char* value) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(value);
  // @@protoc_insertion_point(field_set_char:TCPUser.hostIP)
}
inline void TCPUser::set_hostip(const char* value, size_t size) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCPUser.hostIP)
}
inline ::std::string* TCPUser::mutable_hostip() {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TCPUser.hostIP)
  return hostip_;
}
inline ::std::string* TCPUser::release_hostip() {
  clear_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostip_;
    hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCPUser::set_allocated_hostip(::std::string* hostip) {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostip_;
  }
  if (hostip) {
    set_has_hostip();
    hostip_ = hostip;
  } else {
    clear_has_hostip();
    hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TCPUser.hostIP)
}

// required string hostPort = 2;
inline bool TCPUser::has_hostport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCPUser::set_has_hostport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCPUser::clear_has_hostport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCPUser::clear_hostport() {
  if (hostport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostport_->clear();
  }
  clear_has_hostport();
}
inline const ::std::string& TCPUser::hostport() const {
  // @@protoc_insertion_point(field_get:TCPUser.hostPort)
  return *hostport_;
}
inline void TCPUser::set_hostport(const ::std::string& value) {
  set_has_hostport();
  if (hostport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostport_ = new ::std::string;
  }
  hostport_->assign(value);
  // @@protoc_insertion_point(field_set:TCPUser.hostPort)
}
inline void TCPUser::set_hostport(const char* value) {
  set_has_hostport();
  if (hostport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostport_ = new ::std::string;
  }
  hostport_->assign(value);
  // @@protoc_insertion_point(field_set_char:TCPUser.hostPort)
}
inline void TCPUser::set_hostport(const char* value, size_t size) {
  set_has_hostport();
  if (hostport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostport_ = new ::std::string;
  }
  hostport_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCPUser.hostPort)
}
inline ::std::string* TCPUser::mutable_hostport() {
  set_has_hostport();
  if (hostport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostport_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TCPUser.hostPort)
  return hostport_;
}
inline ::std::string* TCPUser::release_hostport() {
  clear_has_hostport();
  if (hostport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostport_;
    hostport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCPUser::set_allocated_hostport(::std::string* hostport) {
  if (hostport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostport_;
  }
  if (hostport) {
    set_has_hostport();
    hostport_ = hostport;
  } else {
    clear_has_hostport();
    hostport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TCPUser.hostPort)
}

// optional int32 socketid = 3;
inline bool TCPUser::has_socketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCPUser::set_has_socketid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCPUser::clear_has_socketid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCPUser::clear_socketid() {
  socketid_ = 0;
  clear_has_socketid();
}
inline ::google::protobuf::int32 TCPUser::socketid() const {
  // @@protoc_insertion_point(field_get:TCPUser.socketid)
  return socketid_;
}
inline void TCPUser::set_socketid(::google::protobuf::int32 value) {
  set_has_socketid();
  socketid_ = value;
  // @@protoc_insertion_point(field_set:TCPUser.socketid)
}

// optional string nick = 4;
inline bool TCPUser::has_nick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCPUser::set_has_nick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCPUser::clear_has_nick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCPUser::clear_nick() {
  if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& TCPUser::nick() const {
  // @@protoc_insertion_point(field_get:TCPUser.nick)
  return *nick_;
}
inline void TCPUser::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:TCPUser.nick)
}
inline void TCPUser::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:TCPUser.nick)
}
inline void TCPUser::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCPUser.nick)
}
inline ::std::string* TCPUser::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TCPUser.nick)
  return nick_;
}
inline ::std::string* TCPUser::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCPUser::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TCPUser.nick)
}

// -------------------------------------------------------------------

// TCPMsg

// required .TCPUser fromUser = 1;
inline bool TCPMsg::has_fromuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCPMsg::set_has_fromuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCPMsg::clear_has_fromuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCPMsg::clear_fromuser() {
  if (fromuser_ != NULL) fromuser_->::TCPUser::Clear();
  clear_has_fromuser();
}
inline const ::TCPUser& TCPMsg::fromuser() const {
  // @@protoc_insertion_point(field_get:TCPMsg.fromUser)
  return fromuser_ != NULL ? *fromuser_ : *default_instance_->fromuser_;
}
inline ::TCPUser* TCPMsg::mutable_fromuser() {
  set_has_fromuser();
  if (fromuser_ == NULL) fromuser_ = new ::TCPUser;
  // @@protoc_insertion_point(field_mutable:TCPMsg.fromUser)
  return fromuser_;
}
inline ::TCPUser* TCPMsg::release_fromuser() {
  clear_has_fromuser();
  ::TCPUser* temp = fromuser_;
  fromuser_ = NULL;
  return temp;
}
inline void TCPMsg::set_allocated_fromuser(::TCPUser* fromuser) {
  delete fromuser_;
  fromuser_ = fromuser;
  if (fromuser) {
    set_has_fromuser();
  } else {
    clear_has_fromuser();
  }
  // @@protoc_insertion_point(field_set_allocated:TCPMsg.fromUser)
}

// required .TCPMsg.TCPMsgType msgtype = 2;
inline bool TCPMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCPMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCPMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCPMsg::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::TCPMsg_TCPMsgType TCPMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:TCPMsg.msgtype)
  return static_cast< ::TCPMsg_TCPMsgType >(msgtype_);
}
inline void TCPMsg::set_msgtype(::TCPMsg_TCPMsgType value) {
  assert(::TCPMsg_TCPMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:TCPMsg.msgtype)
}

// optional .TCPMsgContent msgContent = 3;
inline bool TCPMsg::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCPMsg::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCPMsg::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCPMsg::clear_msgcontent() {
  if (msgcontent_ != NULL) msgcontent_->::TCPMsgContent::Clear();
  clear_has_msgcontent();
}
inline const ::TCPMsgContent& TCPMsg::msgcontent() const {
  // @@protoc_insertion_point(field_get:TCPMsg.msgContent)
  return msgcontent_ != NULL ? *msgcontent_ : *default_instance_->msgcontent_;
}
inline ::TCPMsgContent* TCPMsg::mutable_msgcontent() {
  set_has_msgcontent();
  if (msgcontent_ == NULL) msgcontent_ = new ::TCPMsgContent;
  // @@protoc_insertion_point(field_mutable:TCPMsg.msgContent)
  return msgcontent_;
}
inline ::TCPMsgContent* TCPMsg::release_msgcontent() {
  clear_has_msgcontent();
  ::TCPMsgContent* temp = msgcontent_;
  msgcontent_ = NULL;
  return temp;
}
inline void TCPMsg::set_allocated_msgcontent(::TCPMsgContent* msgcontent) {
  delete msgcontent_;
  msgcontent_ = msgcontent;
  if (msgcontent) {
    set_has_msgcontent();
  } else {
    clear_has_msgcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:TCPMsg.msgContent)
}

// optional .TCPCmdContent cmdContent = 4;
inline bool TCPMsg::has_cmdcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCPMsg::set_has_cmdcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCPMsg::clear_has_cmdcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCPMsg::clear_cmdcontent() {
  if (cmdcontent_ != NULL) cmdcontent_->::TCPCmdContent::Clear();
  clear_has_cmdcontent();
}
inline const ::TCPCmdContent& TCPMsg::cmdcontent() const {
  // @@protoc_insertion_point(field_get:TCPMsg.cmdContent)
  return cmdcontent_ != NULL ? *cmdcontent_ : *default_instance_->cmdcontent_;
}
inline ::TCPCmdContent* TCPMsg::mutable_cmdcontent() {
  set_has_cmdcontent();
  if (cmdcontent_ == NULL) cmdcontent_ = new ::TCPCmdContent;
  // @@protoc_insertion_point(field_mutable:TCPMsg.cmdContent)
  return cmdcontent_;
}
inline ::TCPCmdContent* TCPMsg::release_cmdcontent() {
  clear_has_cmdcontent();
  ::TCPCmdContent* temp = cmdcontent_;
  cmdcontent_ = NULL;
  return temp;
}
inline void TCPMsg::set_allocated_cmdcontent(::TCPCmdContent* cmdcontent) {
  delete cmdcontent_;
  cmdcontent_ = cmdcontent;
  if (cmdcontent) {
    set_has_cmdcontent();
  } else {
    clear_has_cmdcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:TCPMsg.cmdContent)
}

// -------------------------------------------------------------------

// TCPMsgContent

// required .TCPUser toUser = 1;
inline bool TCPMsgContent::has_touser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCPMsgContent::set_has_touser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCPMsgContent::clear_has_touser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCPMsgContent::clear_touser() {
  if (touser_ != NULL) touser_->::TCPUser::Clear();
  clear_has_touser();
}
inline const ::TCPUser& TCPMsgContent::touser() const {
  // @@protoc_insertion_point(field_get:TCPMsgContent.toUser)
  return touser_ != NULL ? *touser_ : *default_instance_->touser_;
}
inline ::TCPUser* TCPMsgContent::mutable_touser() {
  set_has_touser();
  if (touser_ == NULL) touser_ = new ::TCPUser;
  // @@protoc_insertion_point(field_mutable:TCPMsgContent.toUser)
  return touser_;
}
inline ::TCPUser* TCPMsgContent::release_touser() {
  clear_has_touser();
  ::TCPUser* temp = touser_;
  touser_ = NULL;
  return temp;
}
inline void TCPMsgContent::set_allocated_touser(::TCPUser* touser) {
  delete touser_;
  touser_ = touser;
  if (touser) {
    set_has_touser();
  } else {
    clear_has_touser();
  }
  // @@protoc_insertion_point(field_set_allocated:TCPMsgContent.toUser)
}

// required string msgContent = 2;
inline bool TCPMsgContent::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCPMsgContent::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCPMsgContent::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCPMsgContent::clear_msgcontent() {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_->clear();
  }
  clear_has_msgcontent();
}
inline const ::std::string& TCPMsgContent::msgcontent() const {
  // @@protoc_insertion_point(field_get:TCPMsgContent.msgContent)
  return *msgcontent_;
}
inline void TCPMsgContent::set_msgcontent(const ::std::string& value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set:TCPMsgContent.msgContent)
}
inline void TCPMsgContent::set_msgcontent(const char* value) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:TCPMsgContent.msgContent)
}
inline void TCPMsgContent::set_msgcontent(const char* value, size_t size) {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  msgcontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCPMsgContent.msgContent)
}
inline ::std::string* TCPMsgContent::mutable_msgcontent() {
  set_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgcontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TCPMsgContent.msgContent)
  return msgcontent_;
}
inline ::std::string* TCPMsgContent::release_msgcontent() {
  clear_has_msgcontent();
  if (msgcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msgcontent_;
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCPMsgContent::set_allocated_msgcontent(::std::string* msgcontent) {
  if (msgcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcontent_;
  }
  if (msgcontent) {
    set_has_msgcontent();
    msgcontent_ = msgcontent;
  } else {
    clear_has_msgcontent();
    msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TCPMsgContent.msgContent)
}

// -------------------------------------------------------------------

// TCPCmdContent

// required .TCPUser toUser = 1;
inline bool TCPCmdContent::has_touser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCPCmdContent::set_has_touser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCPCmdContent::clear_has_touser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCPCmdContent::clear_touser() {
  if (touser_ != NULL) touser_->::TCPUser::Clear();
  clear_has_touser();
}
inline const ::TCPUser& TCPCmdContent::touser() const {
  // @@protoc_insertion_point(field_get:TCPCmdContent.toUser)
  return touser_ != NULL ? *touser_ : *default_instance_->touser_;
}
inline ::TCPUser* TCPCmdContent::mutable_touser() {
  set_has_touser();
  if (touser_ == NULL) touser_ = new ::TCPUser;
  // @@protoc_insertion_point(field_mutable:TCPCmdContent.toUser)
  return touser_;
}
inline ::TCPUser* TCPCmdContent::release_touser() {
  clear_has_touser();
  ::TCPUser* temp = touser_;
  touser_ = NULL;
  return temp;
}
inline void TCPCmdContent::set_allocated_touser(::TCPUser* touser) {
  delete touser_;
  touser_ = touser;
  if (touser) {
    set_has_touser();
  } else {
    clear_has_touser();
  }
  // @@protoc_insertion_point(field_set_allocated:TCPCmdContent.toUser)
}

// required .TCPCmdContent.TCPMsgType cmdType = 2;
inline bool TCPCmdContent::has_cmdtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCPCmdContent::set_has_cmdtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCPCmdContent::clear_has_cmdtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCPCmdContent::clear_cmdtype() {
  cmdtype_ = 1;
  clear_has_cmdtype();
}
inline ::TCPCmdContent_TCPMsgType TCPCmdContent::cmdtype() const {
  // @@protoc_insertion_point(field_get:TCPCmdContent.cmdType)
  return static_cast< ::TCPCmdContent_TCPMsgType >(cmdtype_);
}
inline void TCPCmdContent::set_cmdtype(::TCPCmdContent_TCPMsgType value) {
  assert(::TCPCmdContent_TCPMsgType_IsValid(value));
  set_has_cmdtype();
  cmdtype_ = value;
  // @@protoc_insertion_point(field_set:TCPCmdContent.cmdType)
}

// optional string cmdParam = 3;
inline bool TCPCmdContent::has_cmdparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCPCmdContent::set_has_cmdparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCPCmdContent::clear_has_cmdparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCPCmdContent::clear_cmdparam() {
  if (cmdparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdparam_->clear();
  }
  clear_has_cmdparam();
}
inline const ::std::string& TCPCmdContent::cmdparam() const {
  // @@protoc_insertion_point(field_get:TCPCmdContent.cmdParam)
  return *cmdparam_;
}
inline void TCPCmdContent::set_cmdparam(const ::std::string& value) {
  set_has_cmdparam();
  if (cmdparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdparam_ = new ::std::string;
  }
  cmdparam_->assign(value);
  // @@protoc_insertion_point(field_set:TCPCmdContent.cmdParam)
}
inline void TCPCmdContent::set_cmdparam(const char* value) {
  set_has_cmdparam();
  if (cmdparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdparam_ = new ::std::string;
  }
  cmdparam_->assign(value);
  // @@protoc_insertion_point(field_set_char:TCPCmdContent.cmdParam)
}
inline void TCPCmdContent::set_cmdparam(const char* value, size_t size) {
  set_has_cmdparam();
  if (cmdparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdparam_ = new ::std::string;
  }
  cmdparam_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCPCmdContent.cmdParam)
}
inline ::std::string* TCPCmdContent::mutable_cmdparam() {
  set_has_cmdparam();
  if (cmdparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdparam_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TCPCmdContent.cmdParam)
  return cmdparam_;
}
inline ::std::string* TCPCmdContent::release_cmdparam() {
  clear_has_cmdparam();
  if (cmdparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdparam_;
    cmdparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCPCmdContent::set_allocated_cmdparam(::std::string* cmdparam) {
  if (cmdparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdparam_;
  }
  if (cmdparam) {
    set_has_cmdparam();
    cmdparam_ = cmdparam;
  } else {
    clear_has_cmdparam();
    cmdparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TCPCmdContent.cmdParam)
}

// repeated .TCPUser userList = 4;
inline int TCPCmdContent::userlist_size() const {
  return userlist_.size();
}
inline void TCPCmdContent::clear_userlist() {
  userlist_.Clear();
}
inline const ::TCPUser& TCPCmdContent::userlist(int index) const {
  // @@protoc_insertion_point(field_get:TCPCmdContent.userList)
  return userlist_.Get(index);
}
inline ::TCPUser* TCPCmdContent::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCPCmdContent.userList)
  return userlist_.Mutable(index);
}
inline ::TCPUser* TCPCmdContent::add_userlist() {
  // @@protoc_insertion_point(field_add:TCPCmdContent.userList)
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCPUser >&
TCPCmdContent::userlist() const {
  // @@protoc_insertion_point(field_list:TCPCmdContent.userList)
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TCPUser >*
TCPCmdContent::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:TCPCmdContent.userList)
  return &userlist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCPMsg_TCPMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCPMsg_TCPMsgType>() {
  return ::TCPMsg_TCPMsgType_descriptor();
}
template <> struct is_proto_enum< ::TCPCmdContent_TCPMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCPCmdContent_TCPMsgType>() {
  return ::TCPCmdContent_TCPMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TCPUser_2eproto__INCLUDED
